{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAG3BC,EAAS,KAgCb,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BT,EAASU,YAAW,WACdN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAxCPP,EAAKC,KAAKc,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAIC,iBACJC,aAAad,GAYb,IAVA,IAAgCe,EAAAH,EAAII,OAAOC,SAAnCC,EAAwBH,EAAxBZ,MAAOgB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OACjBC,EAAYC,OAAOJ,EAAMK,OASpBC,EAAI,EAAGA,GAAKJ,EAAOG,MAAOC,GAAK,EACtCvB,EAAcuB,EAAGH,GACdI,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBwB,EAAAjC,GAASkC,OAAOC,QAAQ,sBAAqCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAEpE4B,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBwB,EAAAjC,GAASkC,OAAOI,QAAQ,qBAAoCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAEtEkB,GAAaC,OAAOH,EAAKI,OAG3BX,EAAIqB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nlet timeId = null;\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  clearTimeout(timeId);\n\n  const { delay, step, amount } = evt.target.elements;\n  let stepValue = Number(delay.value);\n\n  // if (delay.value < 1 || step.value < 1 || amount.value < 1) {\n  //   Notiflix.Notify.failure(`All fields must be more than zero`);\n  //   return;\n  // }\n\n  // Notiflix.Notify.success('Please observe the promises appear below');\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, stepValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise #${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise #${position} in ${delay}ms`);\n      });\n    stepValue += Number(step.value);\n  }\n\n  evt.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    timeId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$timeId","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","evt","preventDefault","clearTimeout","_elements","target","elements","delay1","step","amount","stepValue","Number","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.79f4ebcb.js.map"}